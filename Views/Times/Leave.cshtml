@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@model IEnumerable<TimeTask.Models.Time>
@using Newtonsoft.Json

<div class="parent">
    <section class="left-nav">
        @Html.Partial("_Leave")
    </section>
    <section class="right-nav p-0">

        @*<div class="calendar_" id="calendar_id">
            <div class="month_">
                <div class="weekdays_">
                    <div>Pon</div>
                    <div>Wto</div>
                    <div>Śro</div>
                    <div>Czw</div>
                    <div>Pią</div>
                    <div>Sob</div>
                    <div>Nie</div>
                </div>
                <div class="days_"></div>
            </div>
        </div>*@

        <div class="SxyrJvNcldodWTh">
            @*@{
                //string s = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthNames[i];
                int days
            }*@
            @*<div class="dykKoaHBFtTPjlK"></div>*@

        </div>

    </section>
</div>

<script type="text/javascript">
    var model_h = @Html.Raw(JsonConvert.SerializeObject(ViewBag.Holiday));

    function daysInMonth(month, year)
    {
        return new Date(year, month, 0).getDate();
    };

    function padWithLeadingZeros(num, totalLength)
    {
        return String(num).padStart(totalLength, '0');
    };

    function getDayName(dateStr, locale)
    {
        var date = new Date(dateStr);
        return date.toLocaleDateString(locale, { weekday: 'long' });
    };

    function getLang()
    {
        if (navigator.languages != undefined)
            return navigator.languages[0];
        return navigator.language;
    }
    getLang();

    function generateCalendar()
    {
        //const date = new Date();
        //date.setDate(1); //ustaw pierwszy dzień miesiąca

        let yearSelect = document.getElementById('iHCBwRzOLpgGYQG');
        let year = yearSelect.options[yearSelect.selectedIndex].value;
        let monthSelect = document.getElementById('IZdWjCoFNPZaIaP');
        let month = monthSelect.options[monthSelect.selectedIndex].value;
        let currentMonth = parseInt(month) + 1;

        var daysLength = daysInMonth(currentMonth, year);

        let SxyrJvNcldodWTh = document.querySelector('.SxyrJvNcldodWTh');
        SxyrJvNcldodWTh.innerHTML = '';
        for (let i = 1; i <= daysLength; i++)
        {
            SxyrJvNcldodWTh.innerHTML += `<div id="` + year + `-` + padWithLeadingZeros(currentMonth, 2) + `-` + padWithLeadingZeros(i, 2) + `" class="dykKoaHBFtTPjlK">`
                + `<span class="KJIBNzKsADLdIeL">` + i + `</span>`
                + `<span class="TwzxYLTXdLMRpSd"></span>`
                + `<span class="hvxzYIeIBOTysxy"></span>`
            + `</div>`;
        }

        let SxyrJvNcldodWTh_children = $(SxyrJvNcldodWTh).children();

        for (let j = 0; j < SxyrJvNcldodWTh_children.length; j++)
        {
            for (let i = 0; i < model_h.length; i++)
            {
                if (model_h[i].Date.split('T')[0] == SxyrJvNcldodWTh_children[j].id)
                {
                    $(SxyrJvNcldodWTh_children[j]).children().eq(0).addClass('pDBzSpSjrpyyUHr');
                    $(SxyrJvNcldodWTh_children[j]).children().eq(1).html(model_h[i].Name);

                    //

                    //let date__ = response2[i].split('T')[0];
                    //let dayName = getDayName(date__, 'pl-PL');
                    
                }
                let dayName = getDayName(SxyrJvNcldodWTh_children[j].id, 'pl-PL');
                $(SxyrJvNcldodWTh_children[j]).children().eq(2).html(dayName);
            }
        }
        
        

        //let days = document.querySelector('.days_');

        //let divs = '';

        ////
        //const prevLastDay = new Date(
        //    year,
        //    month,
        //    0
        //).getDate();
        ////

        //const firstDayIndex = new Date(year, month, 1).getDay(); //pierwszy dzień miesiąca

        ////
        //const lastDayIndex = new Date(
        //    year,
        //    month + 1,
        //    0
        //).getDay();
        ////

        //const nextDays = 7 - lastDayIndex - 0;

        ////dodaj dni poprzedniego miesiąca
        //if (firstDayIndex == 0)
        //{
        //    for (let x = 7; x > 1; x--)
        //    {
        //        divs += `<div class="prev-date2">${prevLastDay - x + 2}</div>`;
        //    }
        //}
        //else
        //{
        //    for (let x = firstDayIndex; x > 1; x--)
        //    {
        //        divs += `<div class="prev-date2">${prevLastDay - x + 2}</div>`;
        //    }
        //}
        ////

        ////dodaj dni miesiąca
        //for (let k = 1; k <= daysLength; k++)
        //{
        //    let newMonth = month + 1;
        //    newMonth = padWithLeadingZeros(newMonth, 2);

        //    let newDay = k;
        //    newDay = padWithLeadingZeros(newDay, 2);

        //    divs += `<div id="` + year + `.` + newMonth + `.` + newDay + `"><span>${k}</span></div>`;
        //}
        ////

        ////dodaj dni następnego miesiąca
        //if (nextDays != 7)
        //{
        //    for (let x = 1; x <= nextDays; x++)
        //    {
        //        divs += `<div class="next-date2">${x}</div>`;
        //    }
        //}
        ////

        ////days.innerHTML = divs;
        //document.querySelector('.days_').innerHTML = divs;


    };
    generateCalendar();
</script>